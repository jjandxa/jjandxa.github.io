<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Webpack2 学习记录 — 第二章·模块热替换/兼容配置]]></title>
      <url>/2017/06/13/webpack-guide-2/</url>
      <content type="html"><![CDATA[<p><img src="/images/webpack-guide-2/lines-of-code.jpg" alt="lines-of-code"></p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　上一章我们完成了 Webpack 的基础配置。对项目常用的资源都进行了模块化，这一章主要说明在基于 Webpack 的项目上实现<strong>模块热替换 (HMR)</strong>。<strong>模块热替换</strong>表现在开发上，就是当我们修改某段 html 或者 js 时。浏览器会自动完成代码的替换切不需要刷新浏览器。别看这个事情很小，一旦习惯了这种设定，就很难回到传统的开发方式了。它对开发效率上的提升是肥肠有必要的，所以我们今天就在基于 Webpack 的项目上来实现这一特性。Webpack 里实现 <strong>HMR</strong> 有两种方式：</p>
<ol>
<li><p>webpack-dev-server</p>
<p>自带服务器、配置简便。</p>
</li>
<li><p>webpack-dev-middleware</p>
<p>这是一个中间件，必须搭配 express 等其他服务器来使用。配置较为复杂，需要有 express 等 Node 服务器使用经验。</p>
</li>
</ol>
<p>这两个我们都会讲到</p>
<blockquote>
<p>HMR： Hot Module Replacement</p>
</blockquote>
<h1 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h1><p>　　基于上一章的代码<a href="https://github.com/jjandxa/webpack-demo/tree/demo2" target="_blank" rel="external">源代码</a>进行开发，我们为其添加 webpack-dev-server 依赖 <code>yarn add webpack-dev-server</code> ，并且在 <strong>package.json</strong> 文件中为 <strong>scripts</strong> 属性添加一条脚本。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line"></div><div class="line">&#123;</div><div class="line">  // 省略代码</div><div class="line">  "scripts": &#123;</div><div class="line">    "dev": "webpack-dev-server --open"</div><div class="line">  &#125;,</div><div class="line">  // 省略代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后执行 <code>yarn run dev</code> ，正常情况下会自动打开浏览器并且访问项目。仔细观察，当我们改动 html 或 js 的时候会触发 Webpack 的构建过程，并且浏览器自动刷新了。这个阶段我们叫做<strong>实时重载</strong>，如果没有太多要求，这个时候也就已经够用了。但如果项目是一个 SPA 应用，那就需要更进一步的实现 <strong>HMR</strong> ，实现重新加载模块而不刷新页面。因为对于 SPA 应用来说 <strong>HMR</strong> 能更好的发挥它的作用。将 dev 脚本更改为 <code>&quot;dev&quot;: &quot;webpack-dev-server --open --inline -- hot&quot;</code> 启用热替换功能。更改 <strong>common.css</strong> 中 box 的背景色，保存后查看浏览器状态。会发现页面在不刷新的情况下更新了 div.box 的背景色。观察控制台的内容，提示已经更新了模块。<img src="/images/webpack-guide-2/2.png" alt="2"></p>
<blockquote>
<p>需要注意的是 index.html 并不在依赖索引中，尽管会触发 webpack 的构建过程，但 webpack-dev-server hmr 并不会重载 index.html 的内容。</p>
</blockquote>
<p><a href="https://github.com/jjandxa/webpack-demo/tree/webpack-dev-server" target="_blank" rel="external">源代码</a></p>
<h1 id="webpack-dev-middleware"><a href="#webpack-dev-middleware" class="headerlink" title="webpack-dev-middleware"></a>webpack-dev-middleware</h1><p>　　同样适用上一章代码<a href="https://github.com/jjandxa/webpack-demo/tree/demo2" target="_blank" rel="external">源代码</a>进行开发。相对于 <strong>webpack-dev-server</strong> 来说，因为需要另外配置服务器，所以<strong>webpack-dev-middleware</strong> 的使用相对复杂一点。</p>
<blockquote>
<p>这里需要有点 express 基础</p>
</blockquote>
<p>添加 <strong>wepack-dev-middleware</strong> 与 <strong>express</strong>依赖 <code>yarn add wepack-dev-middleware express</code> 。新建 <strong>build/dev-server.js</strong> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev-server.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</div><div class="line"><span class="keyword">var</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>);</div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</div><div class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">"../webpack.config"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig);</div><div class="line"></div><div class="line">app.use(webpackDevMiddleware(compiler, &#123;</div><div class="line">  <span class="attr">publicPath</span>: <span class="string">"/"</span> <span class="comment">// 大部分情况下和 `output.publicPath`相同</span></div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.listen(<span class="number">8080</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Listening on port 8080!"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p> 以上代码的作用是启动 webpack ，并且配置 webpack-dev-middleware 中间件，最后启动 express。这仅仅是创建了一个基于 webpack 的开发服务器，实现 HMR 我们需要再添加一个依赖 <strong>webpack-hot-middleware</strong> <code>yarn add webpack-hot-middleware</code> 。在 webpack.config.js 中修改一下内容：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="comment">// 省略相关代码</span></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: [<span class="string">'./build/dev-client.js'</span>, <span class="string">'./src/main.js'</span>],</div><div class="line">  <span class="comment">// 省略相关代码</span></div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// 省略相关代码</span></div><div class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</div><div class="line">    <span class="keyword">new</span> webpack.NoErrorsPlugin()</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建 <strong>build/dev-client.js</strong> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev-client.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'eventsource-polyfill'</span>)</div><div class="line"><span class="keyword">var</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)</div><div class="line"></div><div class="line">hotClient.subscribe(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (event.action === <span class="string">'reload'</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.location.reload()</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>安装 eventsource-polyfill 依赖以兼容不支持事件源的浏览器 <code>yarn add eventsource-polyfill</code> ，添加完以上内容后，修改 <strong>dev-server.js</strong> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// dev-server.js</span></div><div class="line"><span class="comment">// 省略相关代码</span></div><div class="line"><span class="keyword">var</span> webpackHotMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-hot-middleware"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig);</div><div class="line"></div><div class="line"><span class="keyword">var</span> hotMiddleware = webpackHotMiddleware(compiler);</div><div class="line"></div><div class="line"><span class="comment">// 解决 index.html 修改后不刷新问题</span></div><div class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">compilation</span>) </span>&#123;</div><div class="line">  compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, cb</span>) </span>&#123;</div><div class="line">    hotMiddleware.publish(&#123; <span class="attr">action</span>: <span class="string">'reload'</span> &#125;)</div><div class="line">    cb()</div><div class="line">  &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">app.use(hotMiddleware);</div><div class="line"></div><div class="line"><span class="comment">// 省略相关代码</span></div></pre></td></tr></table></figure>
<p>更改 <strong>package.json</strong> 的 <code>dev</code> 脚本 为 <code>node build/dev-server.js</code> ，运行 <code>yarn run dev</code> 启动服务。</p>
<p>测试效果，实现了 HMR ，并解决 <strong>webpack-dev-server</strong> 下 <strong>index.html</strong> 修改不刷新的问题。</p>
<p><a href="https://github.com/jjandxa/webpack-demo/tree/webpack-dev-middleware" target="_blank" rel="external">源代码</a></p>
<h1 id="第三方模块兼容"><a href="#第三方模块兼容" class="headerlink" title="第三方模块兼容"></a>第三方模块兼容</h1><p>　　大多数情况下，我们还会依赖一些对全局变量有要求的第三方库。例如各类 Jquery 插件，依赖于全局变量 <strong>$</strong> 或 <strong>jquery</strong> 。对于这种情况，可以使用 ProvidePlugin 插件。参考一下情况：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 省略相关代码</span></div><div class="line">  plugins: [</div><div class="line">    <span class="comment">// 省略相关代码</span></div><div class="line">    <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</div><div class="line">      <span class="attr">$</span>: <span class="string">'jquery'</span>,</div><div class="line">      <span class="attr">jQuery</span>: <span class="string">'jquery'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>main.js 中使用 jquery ：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"></div><div class="line"><span class="built_in">require</span>(<span class="string">'./css/common.css'</span>)</div><div class="line"></div><div class="line">$(<span class="string">"#app"</span>).addClass(<span class="string">"box"</span>)</div></pre></td></tr></table></figure>
<p>测试后一切正常！</p>
<p>兼容第三方模块还有其他方式，通过 <code>imports-loader</code> 、 <code>exports-loader</code> 都是解决第三方依赖的方式，可以参考<a href="https://doc.webpack-china.org/guides/shimming/" target="_blank" rel="external">官网相关资料</a>。</p>
<p><a href="https://github.com/jjandxa/webpack-demo" target="_blank" rel="external">源代码</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Webpack </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Webpack2 学习记录 — 第一章·最小可用配置]]></title>
      <url>/2017/05/29/webpack-guide-1/</url>
      <content type="html"><![CDATA[<p><img src="/images/webpack-guide-1/logo.svg" alt="logo"></p>
<a id="more"></a>
<blockquote>
<p>在大前端的路上，总有那么些坑需要去踩。</p>
</blockquote>
<p>　　相比于 14 年初刚出来工作，那时对前端的感觉远没有现在敏感，也不会想到现在的前端会发生天翻地覆的变化。细数自己对前端领域的技能，不懂的还有很多。NodeJs 也是后来粗略看了些，略微了解。前端自动化方面则一直没有时间去学习，例如 Gulp 、Grunt 都一窍不通。而前端模块化方面，之前略微了解 RequireJS ，Webpack 也曾手动写过配置。如今 Webpack 已升级到 2.0 + ，感觉是一个系统的学习并记录下过程的好时机。基于这个原因，就有了这个系列。— <strong>Webpack2 学习记录</strong></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p>　　对于初次接触 Webpack 甚至 NodeJS 的同学，学习起来可能会有些困难。对于这种情况，建议还是先学习一些 NodeJS 的基础知识再学习 Webpack 会好些。Webpack 是一个模块化打包工具，它能将 JavaScript 、 CSS 、 JSX 、 图片等等文件进行模块化加载且打包。我们不在这里赘述模块化工程的重要性，因为这是越来越壮大的前端开发工作所不可避免的部分。Webpack 所主张的是 <strong>一切皆模块</strong> 的理解，我们就来看看它是怎么使用的吧！</p>
<h2 id="Hello-Webpack"><a href="#Hello-Webpack" class="headerlink" title="Hello Webpack!"></a>Hello Webpack!</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// lib/utils.js</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello Webpack!'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./lib/utils'</span>)</div><div class="line">utils.show()</div></pre></td></tr></table></figure>
<blockquote>
<p>以往，我们在 HTML 里对 JS 代码的程序依赖只能通过 script 标签的加载顺序控制。这样的坏处是程序的依赖关系不可见，代码里没有显式的表名程序需要的依赖。导致工程维护困难，这也正是前端模块化工程出现的原因之一。在上面的程序里，我们可以看到在 main.js 依赖与 utils.js 模块，优势是显而易见的。但我们现在要怎么使用它呢？接下来就是 Webpack 发挥作用的时候了。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/Users/aixiaoai/nodejs/webpack-demo/dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行 <code>webpack</code> 就会开始进行构建。打包成功后，项目下的 dist 目录会多出 bundle.js 文件。这就是打包后的程序，我们可以试着运行看看，执行 <code>node dist/bundle.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webpack-demo$ node dist/bundle.js</div><div class="line">Hello Webpack!</div></pre></td></tr></table></figure>
<p>项目被成功打包了，我们可以把该 JS 文件引入 HTML 了，是不是很酷！接下来我们讲解一下以上是如何实现的。</p>
<h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><ol>
<li><p>请尽量将项目作为 NodeJS 项目运行，因为在此基础上我们需要使用很多依赖于 NPM 包管理器的工具。相关命令 <code>npm init</code> 或 <code>yarn init</code></p>
</li>
<li><p>安装 webpack <code>npm install webpack --save-dev</code> 或 <code>yarn add webpack</code></p>
</li>
<li><p>webpack 默认会寻找项目下命名为 webpack.config.js 的文件作为配置。所以我们新建一个名为 webpack.config.js 的文件，内容与上面的示例相同</p>
<blockquote>
<p>这里有一个需要注意的地方，output.path 的值需要是绝对路径</p>
</blockquote>
</li>
<li><p>运行 <code>webpack</code></p>
</li>
</ol>
<p><a href="https://github.com/jjandxa/webpack-demo/tree/demo1" target="_blank" rel="external">源代码</a></p>
<h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><p>　　在上面的例子中我们讲到使用 Webpack 来打包一个 JavaScript 文件。有同学肯定会问，不是说 Webpack 的理念是<strong>一切皆模块</strong>吗？那其他文件怎么办？这里我们需要讲到 Webpack 的 <strong>rules</strong> ，在 Webpack 1.x 时代叫做 <strong>loaders</strong>。</p>
<h2 id="模块化加载-CSS"><a href="#模块化加载-CSS" class="headerlink" title="模块化加载 CSS"></a>模块化加载 CSS</h2><p>　　Webpack 里针对不同文件转化为模块的做法，是通过相对应的模块加载器实现的。例如 ES6 可以用 babel-loader 来加载、图片文件可以用 url-loader 来加载、CSS 可以用 style-loader|css-loader 加载。拿 CSS 文件来举例：</p>
<p>安装 style-loader和css-loader <code>npm install style-loader css-loader --save-dev</code> 或 <code>yarn add style-loader css-loader</code></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* css/common.css */</span></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#666666</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./css/common.css'</span>)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).className = <span class="string">'box'</span></div><div class="line"></div><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: <span class="string">'/Users/aixiaoai/nodejs/webpack-demo/dist'</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行 <code>webpack</code>，如果没有报错即是打包成功。我们来看看效果：</p>
<p><img src="/images/webpack-guide-1/webpack-1.png" alt="webpack-1"></p>
<p>成功应用了 CSS ，很酷吧！</p>
<h2 id="模块化加载图片等资源文件"><a href="#模块化加载图片等资源文件" class="headerlink" title="模块化加载图片等资源文件"></a>模块化加载图片等资源文件</h2><p>对于图片也是如此，我们加入 url-loader 试试。安装 url-loader <code>npm install url-loader --save-dev</code> 或 <code>yarn add url-loader</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="comment">// 省略相关代码</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 省略相关代码</span></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: &#123;</div><div class="line">      <span class="comment">// css-loader 省略相关代码</span></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">          <span class="attr">use</span>: &#123;</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">              <span class="comment">// 如果超过大小限制，则不进行编码，输出到/img目录</span></div><div class="line">              limit: <span class="number">10000</span>,</div><div class="line">              <span class="attr">name</span>: <span class="string">'/img/[name].[hash:7].[ext]'</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="comment">// 省略相关代码</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'img'</span>).src = <span class="built_in">require</span>(<span class="string">'./img/logo.svg'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>执行 <code>webpack</code>命令，查看效果：</p>
<p><img src="/images/webpack-guide-1/webpack-2.png" alt="webpack-2"></p>
<p>666 ！你们说，到底 6 不 6 ！但是！有同学会说了，不想在 JS 中加载图片，想直接在 img 标签加在 src 属性里可以吗？当然可以！</p>
<h2 id="基于-HTML-加载图片"><a href="#基于-HTML-加载图片" class="headerlink" title="基于 HTML 加载图片"></a>基于 HTML 加载图片</h2><p>　　我们发现需要在 JS 中加载图片，这在开发上难免会有些不便。这里需要使用 <strong>html-loader</strong> 来解决这个问题，安装<code>npm install html-loader --save-dev</code> 或 <code>yarn add html-loader</code>，加载器的配置也是老生常谈了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 省略相关代码</span></div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: &#123;</div><div class="line">      <span class="comment">// 省略相关代码</span></div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</div><div class="line">        <span class="attr">use</span>: &#123;</div><div class="line">          <span class="attr">loader</span>: <span class="string">'html-loader'</span>,</div><div class="line">          <span class="attr">options</span>: &#123;</div><div class="line">            <span class="attr">minimize</span>: <span class="literal">true</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// main.js</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'./css/common.css'</span>)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'app'</span>).className = <span class="string">'box'</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack-Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./src/img/logo.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果与上一个例子是相同的，但我们可以在 img 标签的 src 属性指定图片了！</p>
<h2 id="Plugins-插件"><a href="#Plugins-插件" class="headerlink" title="Plugins(插件)"></a>Plugins(插件)</h2><p>　　基于上面的示例，我们发现需要手动在 index.html 中引入 bundle.js 。这里要用到 Webpack Plugins 中的 <strong>html-webpack-plugin</strong> 插件，我们来对上面的项目进行一些改造。安装插件<code>npm install html-webpack-plugin --save-dev</code> 或 <code>yarn add html-webpack-plugin</code> ，然后我们开始配置插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// 省略相关代码</span></div><div class="line">  plugins: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlguin(&#123;</div><div class="line">      <span class="comment">// 输出文件名</span></div><div class="line">      filename: <span class="string">'index.html'</span>,</div><div class="line">      <span class="comment">// 模板文件名</span></div><div class="line">      template: <span class="string">'index.html'</span>,</div><div class="line">      <span class="comment">// script 标签置于 body 底部</span></div><div class="line">      inject: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack-Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./src/img/logo.svg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"img"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>运行 <code>webpack</code> 开始构建，插件会将项目根目录下的 index.html 作为模板编译到 dist 目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dist/</div><div class="line">|_bundle.js</div><div class="line">|_index.html</div></pre></td></tr></table></figure>
<p>访问构建后的 index.html 查看效果。</p>
<p><img src="/images/webpack-guide-1/webpack-3.png" alt="webpack-3"></p>
<p>大成功！</p>
<p><a href="https://github.com/jjandxa/webpack-demo/tree/demo2" target="_blank" rel="external">源代码</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
            <tag> Webpack </tag>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的游戏历程 - 青春]]></title>
      <url>/2017/05/24/my-game-experience-2/</url>
      <content type="html"><![CDATA[<p><img src="/images/my-game-experience-1/mxd.jpg" alt="mxd"></p>
<a id="more"></a>
<p>　　小学五六年级时，我第一次进入网吧、第一次有了 QQ 。第一次去网吧时，托同学帮我注册了 QQ，还给了我一个《梦幻西游》账号。谁也没想到，这次经历导致我几年后辍学。那时的我正值青春年少，玩的最多的就是 — 网游。</p>
<p>　　《梦幻西游》在我的青春的游戏史占了很大的一部分。我很清楚的记得刚玩时，到 10 级就需要充点卡。但还在小学时的我，没有钱去买点卡。所以玩到 9 级就只能在<strong>建邺城</strong>（新手村）遛弯、打乌龟、海毛虫，运气好的还能遇到泡泡（珍稀神兽）。新手村待久了总会觉得无趣，因为新手任务做完了，地图逛完了，没有其他的探索要素。所以总会忍不住点下升级按钮，走出建业城门，来到<strong>江南野外</strong>则又是一番新天地。由于下线前可以不用充点卡，所以还是能玩到 15 级左右。拜了师门，学了技能。这时网吧时间也要到了，一个新手号也就这样结束了，有段时间是这样循环往复过来的。有一次有同学送给了我一个 40+ 级的<strong>大唐官府剑侠客</strong>，那时我第一次接触到较为高级的角色。玩这个号时，经常去抓鬼，只是没有武器没有装备，打起来异常辛苦。这个号玩了一阵后由于没有合适的路子搞装备，我也就弃了。还有次是帮同学练号，中途我还把他号给盗了，最后东窗事发弄得非常尴尬。还有次我离家出走，去一个同玩《梦幻西游》的网友那里留宿。这些都是玩这游戏时经历的故事。</p>
<p><img src="/images/my-game-experience-1/mhxy.jpeg" alt="mhxy"></p>
<p>　　其次玩的很多的是《跑跑卡丁车》。这个不得不说的是同班同学也有好几个玩的，我喜欢玩赛车游戏，喜欢风驰电掣，也是那时的秋名山老司机。森林发卡赛道我可以用板车跑赢其他人的高级车，那时真真是意气风发。有段时间甚至想过以后是不是能参加职业赛事，当然这只是一个不切实际的想法。那点技巧拿到高手里来说还是过于低级。在这之前，我还是一个贫民玩家。但有一次过年，我开始有了压岁钱，搬到深圳后第一次有自己的压岁钱，父母给的。有 50 块，我犹豫了一阵然后买了跑跑卡丁车里的车辆。我记得很清楚，那是<strong>棉花糖系列 — 棉花糖PRO</strong><img src="/images/my-game-experience-1/ppldc-mht.jpg" alt="ppldc-mht"></p>
<p>从此摇身一变为人民币贫民玩家。怀揣着激动无比的心情，在网吧加了 2 个小时的钟，尽情体验那风驰电挚带来的激情。</p>
<p>　　小学五年级时，班里来了个转学生，在那之前我一直与一个女孩同桌。她是我的邻居，也是我偷偷喜欢的人。在这个转学生来了之后，班里开始调整位置。从此他们变成了同桌，我调到了他们的后面。有一次周末，我与转学生和其他几个男同学，相约去网吧玩游戏。这是我第一次玩这个游戏 — 《冒险岛》。</p>
<p>　　相对来说《冒险岛》并不是我很深入去玩的一款游戏，我记得它升级很慢。从<strong>彩虹岛</strong>的新手教程升到10级，然后坐船去<strong>金银岛</strong>。这个过程还算可以接受，但后面的升级道路会越来越困难。升级所需经验经常是成倍增长的。之后的很长一段时间我并没有继续接触这个游戏，再次接触时是<strong>战神</strong>这个职业上线的时候，伴随出现的是利用<strong>战神的反盾</strong>技能出现的外挂。这是我第一次把一个角色升到 100 级以上，用出各种炫酷的高级技能时总会有一种心满意足的成就感，尽管是用开外挂升级得来的。从《冒险岛》后会引申到另一款游戏《冲锋岛》，由<strong>世纪天成</strong>代理。当时宣传时说是《冒险岛》精神续作，开发团队大部分是原冒险岛的开发团队组成。这在当时还是很吸引眼球的，特别是《冒险岛》的老粉丝们。在这个游戏里还认识了刘力菱同学，也是到现在也要好的朋友。旧时的游戏经历也差不多要结束了。我还记得那时最后玩的一款游戏是《海洋骑士团》，盛大代理，游戏内容是各种可爱的卡通人物骑在乌龟、海豚上在水里竞速的游戏。也是在这个时候认识了我们美丽、可爱的郑波澜同学。而我也在这时结束了辍学生涯，前往广州上学，步入新时代。</p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 家用机 </tag>
            
            <tag> 掌机 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的游戏历程 - 初见]]></title>
      <url>/2017/05/09/my-game-experience-1/</url>
      <content type="html"><![CDATA[<p><img src="/images/my-game-experience/jeshoots-com-250229.jpg" alt="jeshoots-com-250229"></p>
<a id="more"></a>
<p>　　最近总想写些什么，像是无数话语梗在心头，好不难受！想来想去，发现游戏在我的人生中占有很大一部分位置。那就来讲讲我玩游戏的经历吧。</p>
<p>　　我记得，那时我还小。家住在揭阳市惠来县隆江镇，我们家跟着叔叔伯伯一样，做鱼副产品营生，还有个小厂子。那时候厂子就我爸和我妈在做，奶奶偶尔也会在厂子里看着。相对于各位叔叔伯伯的厂来说，我们家的厂子很小，亏了那时效益不错，我们家也过得还好。</p>
<p>　　我爸每过一段时间就会去送货，大多是送到深圳等地。回来时总会给我们带各种好吃好玩的。有时候会带好吃好玩的回来，记得第一次喝益力多，也是那时我爸带回来的，印象甚是深刻。我第一次玩到的游戏机 — 红白机，也就是我爸在某次送货回家时带回了一个盒子。那时我也不知道它叫什么，只知道我爸插到电视上后可以玩游戏。这就是我第一次接触到<strong>家用机</strong>，直到十几年后 — 我十五岁，我才知道它的名字叫 — <strong>红白机（FC）</strong>。</p>
<p><img src="/images/my-game-experience/Famicom.jpg" alt="Famicom"></p>
<p>　　那时候我们家流行玩的是<strong>《坦克大战》</strong>，也是我爸唯一会玩的游戏。后来喜欢玩<strong>《F1 赛车》</strong>、<strong>《雪人兄弟》</strong>、<strong>《松鼠大战》</strong>、<strong>《魂斗罗》</strong>。但好景不长，也不知道那台 FC 是不是正版，而且玩的时候由于天生大力 — 手柄按键容易坏。由于这个原因，手柄坏了后也没地方换修。结果就是这台 FC 慢慢的淡出了视线，不知在何时消失的无影无踪。后面再玩到时，只能是去亲戚家蹭小霸王了。所以现在还是蛮想念那台 FC 的。</p>
<p><img src="/images/my-game-experience/tank.jpeg" alt="tank"></p>
<p><img src="/images/my-game-experience/snowman.jpeg" alt="snowman"></p>
<p><img src="/images/my-game-experience/squirrel.jpeg" alt="squirrel"></p>
<p><img src="/images/my-game-experience/hdl.jpeg" alt="hdl"></p>
]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 家用机 </tag>
            
            <tag> 掌机 </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我眼中的锤子手机 - 锤子科技 2017 春季新品发布会]]></title>
      <url>/2017/05/08/smartisan-1/</url>
      <content type="html"><![CDATA[<p><img src="/images/smartisan-new-product.png" alt="smartisan-new-product"></p>
<a id="more"></a>
<p>　　说起为什么知道老罗这个人。许多人都能追溯到老罗语录时期，十几岁便听着老罗语录长大。在那时，我还是个懵懵懂懂的小学生。在家看着各种国产、日产动画片，难以想象在今日会对这样一个胖子发出什么感想。</p>
<blockquote>
<p>我不是一个从小听着老罗语录长大的人。</p>
</blockquote>
<p>　　我已经忘记第一次知道老罗时是在什么时候，依稀记得是在 12 年左右。那时还是个学生，当时对小米、王自如还存在好感。在他们之间微博的交流中知道了这个人，并且在某个慵懒的午后，不知在什么地方看了《一个理想主义者的创业故事 2》，之后便一发不可收拾。我抽时间看完了老罗的其他几场演讲，包括在吉林大学的那场《我的奋斗》。至于原因，可能就是因为比相声好看？</p>
<blockquote class="blockquote-center">通过干干净净地赚钱让人相信干干净净地赚钱是可能的；通过实现理想让人相信实现理想是可能的；通过改变世界让人相信改变世界是可能的……即使是在中国。</blockquote>

<p>　　打动我的其实是老罗与他的培训机构-<strong>老罗英语培训</strong>创业中的各种经历，让我知道我们还可以干干净净挣钱，认认真真做事。那时，我知道我们的价值观是相同的。我们相信善良、相信所有美好的事物，即使现在身处黑暗。</p>
<p>　　我是一个科技爱好者，我喜欢游戏，SONY 的 PLAYSTATION 3、4、Vita，Nintendo 的 DS、3DS、WII、NS，MOTOROLA 的 MOTO360，APPLE 的 IPAD，IPHONE，MAC。科技产品总是让我内心充满激动，准确的讲，美好的事物总是让人激动的。在《一个理想主义者的创业故事 3》中，老罗公布了他做手机的计划，现在的我已经想不起当时是何种反应。那时小米崛起，一个英语老师转行做手机似乎并不是什么不可实现的事情？那时我肯定是充满期盼的。</p>
<p>　　一年后，锤子 ROM 问世。那场发布会无疑是失败的，失控的三小时即使是躺在床上看完也是无比疲惫。不得不说，那时我有些失望。尽管在 ROM 上有些功能确实是有亮点，但我对它桌面的设计并不是特别认同。尽管依旧期待，但散去了不少热情。</p>
<p>　　<blockquote class="blockquote-center">永远年轻，永远热泪盈眶。— 《The Dharm Bums》</blockquote></p>
<p>　　又一年，我已从学生转变为一个上班族。我记得那年那晚，<strong>锤子科技 2014 产品发布会</strong>。刚下班我就急着回家，边吃饭边用着 iphone 5 看直播。它来了，带着骄傲。Smartisan T1 售价 3000 元起，我承认它的骄傲，只是我买不起。那时也震惊于很多人服了全款或部分货款等出货，却过了一个多月都拿不到。等到产能稳定时，T1 从 3000 + 降价到 2400 + 。那时我在顺电试用了 T1 ，在那之前我对这台手机的所有担忧全部消失的无影无踪。用那时的话讲就是好用的不像安卓手机，然后我用 2800 RMB 买了 4G 32G 版的黑色，现在想想觉得很可惜。因为我觉得 Smartisan T1 白色版真是绝美！<img src="/images/07.jpg" alt="07"></p>
<p>　　一年后，我在长沙。在失望中购买了 Smartisan T2 ，失望的原因是因为配置。经过一年的服役，不算旗舰的 T1 已经显得有些力不从心。我急切的希望有一台性能强劲的手机，也希望从工业设计、软件系统都能像 Smartisan 做的那样好。我买 T2 唯一的理由只是因为它系统基于 Android 5.0.1，还有就是它美。</p>
<p><img src="/images/02.png" alt="02"></p>
<p>　　16年，Smartisan M系列面世。相对于外观的妥协，配置诚意满满，系统功能更新让人惊艳。<strong>One step</strong>、<strong>Big Bang</strong> 都是让人为之惊叹的优点，只是这并不够，外观中规中矩。对于之前用过 T1、T2，审美口味早已被养刁了的我总是在想，为什么锤科总是没有一部完美的手机呢？</p>
<p>　　现在，锤子科技新品发布会即将到来。依旧让我激动，我希望它能成功。因为我相信美好的事物必将能成功。</p>
<blockquote class="blockquote-center">如果一开始你没能成功，拿个更大的锤子</blockquote>]]></content>
      
        <categories>
            
            <category> 杂谈 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[SSM 整合教程，献给新人们的礼物 - 第二章]]></title>
      <url>/2017/04/19/ssm-c2/</url>
      <content type="html"><![CDATA[<h1 id="前情回顾"><a href="#前情回顾" class="headerlink" title="前情回顾"></a>前情回顾</h1><p>　在第一章里，我们完成了一个基于 Spring + Spring MVC 的 Web 应用程序。但在我们现实中，一个具有一定业务能力的 Web 系统往往都需要进行数据的持久化。接下来，我们会在第一章的基础上，整合 <strong>ORM 框架 — Mybatis</strong> 。</p>
<blockquote>
<p>ORM: Object Relational Mapping 对象关系映射</p>
</blockquote>
<a id="more"></a>
<h1 id="添加-Mybatis-依赖"><a href="#添加-Mybatis-依赖" class="headerlink" title="添加 Mybatis 依赖"></a>添加 Mybatis 依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Mybatis --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 数据库连接池 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring ORM --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring 事务 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spring AOP --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Mysql 驱动 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="创建数据库配置文件"><a href="#创建数据库配置文件" class="headerlink" title="创建数据库配置文件"></a>创建数据库配置文件</h1><p>在资源文件夹 <strong>resoueces</strong> 下创建 datasource.properties：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># c3p0 property</div><div class="line"># 数据库驱动</div><div class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</div><div class="line"># 数据库链接</div><div class="line">jdbc.url=jdbc:mysql://localhost:3306/easyms?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</div><div class="line"># 用户名</div><div class="line">jdbc.username=root</div><div class="line"># 密码</div><div class="line">jdbc.password=000000</div><div class="line"># 最大连接数</div><div class="line">conn.maxPoolSize=40</div><div class="line">conn.maxStatements=80</div><div class="line"># 最小连接数</div><div class="line">conn.minPoolSize=5</div><div class="line">conn.initialPoolSize=5</div><div class="line">conn.maxIdleTime=60</div></pre></td></tr></table></figure>
<h1 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h1><p>在 spring 配置文件 <strong>ssm-context.xml</strong> 里配置数据源，首先需要导入数据库配置文件 <strong>datasource.properties</strong> ：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--解析资源文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>配置数据源，在 <strong>ssm-context.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"$&#123;conn.maxIdleTime&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"$&#123;conn.maxStatements&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;conn.initialPoolSize&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;conn.maxPoolSize&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;conn.minPoolSize&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意：dataSouce 的创建必须在 解析资源文件之后，因为初始化数据源的各种信息是通过资源文件读取出来的。</p>
</blockquote>
<h1 id="配置-SqlSessionFactory"><a href="#配置-SqlSessionFactory" class="headerlink" title="配置 SqlSessionFactory"></a>配置 SqlSessionFactory</h1><p>在 <strong>ssm-context.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- MyBatis sqlSessionFactory配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/mapper/*.xml"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"ml.jjandxa.mapper.model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 自动扫描 Mapper --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mapperScannerConfigurer"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"ml.jjandxa.mapper.mapper"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：mapperLocations 为 Mapper Xml 文件所在路径，这里为 resources/mybatis/mapper 文件夹为例。typeAliasesPackage 为 Model 类所在路径。</p>
</blockquote>
<h1 id="配置-AOP-事务管理"><a href="#配置-AOP-事务管理" class="headerlink" title="配置 AOP 事务管理"></a>配置 AOP 事务管理</h1><p>在 <strong>ssm-context.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring事务管理器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span></span></div><div class="line">      <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethmods"</span> <span class="attr">expression</span>=<span class="string">"execution(* ml.jjandxa.service.*.*(..))"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethmods"</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 事务的传播特性 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"insert*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：pointcut 里的 expression 需更改为相应的包名，它的作用就是配置 aop 时拦截哪些类与方法</p>
<p>如果提示 <strong>apo</strong> 、 <strong>tx</strong> 标签找不到，需要在根节点的属性里导入标签的命名空间</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span></span></div><div class="line">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></div><div class="line">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></div><div class="line">       <span class="attr">xsi:schemaLocatio</span>=<span class="string">"http://www.springframework.org/schema/aop</span></div><div class="line">                          http://www.springframework.org/schema/aop/spring-apo.xsd</div><div class="line">                          http://www.springframework.org/schema/tx</div><div class="line">                          http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>到此为止，框架整合的部分结束，接下来便是如何使用的部分了。</p>
<h1 id="编写业务代码"><a href="#编写业务代码" class="headerlink" title="编写业务代码"></a>编写业务代码</h1><p>对 Mybatis 来说，编写业务时需要几部分：</p>
<ol>
<li>Mapper 接口</li>
<li>Mapper XML</li>
<li>Model</li>
</ol>
<p>其中 Mapper 接口与 Mepper XML 是相对应的，对于每个表都需要以上三部分。回头看看 Mybatis 的配置中，<strong>sqlSessionFactory</strong> 与 <strong>mapperScannerConfigurer</strong> 配置了几个关键属性：</p>
<ol>
<li><strong>sqlSessionFactory</strong> 的 <strong>mapperLocations</strong> 属性，这个属性配置 Mapper XML 的路径。</li>
<li><strong>sqlSessionFactory</strong> 的 <strong>typeAliasesPackage</strong> 属性，这个属性配置 Model 的路径。</li>
<li><strong>mapperScannerConfigurer</strong> 的 <strong>basePackage</strong> 属性，这个属性配置了 Mapper 接口的路径。</li>
</ol>
<p>基于以上配置，我们先在 <strong>ml.jjandxa.mapper.model</strong> 下编写 Model：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ml.jjandxa.mapper.model;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by aixiaoai on 2017/4/23.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们需要在 <strong>ml.jjandxa.mapper.mapper</strong> 包下编写 Mapper 接口 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ml.jjandxa.mapper.mapper;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ml.jjandxa.mapper.model.User;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by aixiaoai on 2017/4/23.</div><div class="line"> */</div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 查询所有用户</span></div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，便是需要在 <strong>resources/mybatis/mapper</strong> 下编写 Mapper XML 文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"ml.jjandxa.mapper.mapper.UserMapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMapper"</span> <span class="attr">type</span>=<span class="string">"ml.jjandxa.mapper.model.User"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"ID"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"NAME"</span> <span class="attr">property</span>=<span class="string">"name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"PASSWORD"</span> <span class="attr">property</span>=<span class="string">"password"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMapper"</span> &gt;</span></div><div class="line">        SELECT * FROM USER</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：以上三步，Mapper 接口、Model 的编写都较为简单。重点在于 Mapper XML 的编写。</p>
<ol>
<li>Mapper XML 根节点的 <strong>namespace</strong> 即是 Mapper 接口的全限定包名，这就是为什么说 Mapper 接口与 Mapper XML 是相对应的。</li>
<li>Mapper XML 中的 <strong>select</strong> 、  <strong>update</strong> 、  <strong>insert</strong> 、  <strong>delete</strong> 节点对应 Mapper 接口中的一个方法。</li>
</ol>
<p>至此，可以发现 Mapper XML 中的 <strong>namespace</strong> 加上<strong>节点id</strong> 等于 <strong>Mapper 接口中的方法 ml.jjandxa.mapper.mapper.UserMapper.selectAll()</strong></p>
<p>注2：Mapper 接口需要加上 <strong>@Repository</strong> 注解</p>
</blockquote>
<p>最后我们需要编写 Service 层的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ml.jjandxa.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ml.jjandxa.mapper.mapper.UserMapper;</div><div class="line"><span class="keyword">import</span> ml.jjandxa.mapper.model.User;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by aixiaoai on 2017/4/23.</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserMapper userMapper;</div><div class="line"></div><div class="line">    <span class="comment">//查询所有</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userMapper.selectAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：同样，注意要加上 <strong>@Service</strong> 注解</p>
</blockquote>
<p>最后一部分，在 Controller 中注入 UserService，这里选择在第一章中最后测试用的 <strong>HelloSpring</strong> 来测试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ml.jjandxa.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ml.jjandxa.mapper.model.User;</div><div class="line"><span class="keyword">import</span> ml.jjandxa.service.UserService;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by aixiaoai on 2017/3/24.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpring</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">// 查询所有记录</span></div><div class="line">        List&lt;User&gt; list = userService.selectAll();</div><div class="line"></div><div class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        result.put(<span class="string">"data"</span>, list);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注: 记得往表里添加数据！！</p>
</blockquote>
<p>来测试一下吧，启动服务。观察控制台输出，若没有异常，便说明整合并无出现明显错误。访问 <strong><a href="http://localhost:8080/hellossm/hello" target="_blank" rel="external">http://localhost:8080/hellossm/hello</a></strong></p>
<p><img src="/images/ssm/ssm-c2-test.png" alt="ssm-c2-test"></p>
<p>成功查询出数据！大成功！！！</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/jjandxa/hello-ssm/tree/Chapter-2" target="_blank" rel="external">源代码</a></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>SSM 整合教程到这里就结束了。这些东西很简单，但我想作为新手们入门的一个敲门砖很合适。我们不仅需要知道如何整合框架，也需要明白这些框架如何使用。后续可能会出 Spring MVC 入门使用教程，Mybatis 入门使用教程。当然，最后还是会告诉大家。以上这么繁杂的配置过程，其实都可以用 Spring Boot 来快速解决。但在那之前，希望新手们能够多花时间学习、实践、总结。</p>
<div style="text-align: center;">^_^</div>]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github Pages & Hexo 博客搭建教程]]></title>
      <url>/2017/03/24/github-pages-deploy-guide/</url>
      <content type="html"><![CDATA[<h1 id="为什么要写博客？"><a href="#为什么要写博客？" class="headerlink" title="为什么要写博客？"></a>为什么要写博客？</h1><p>　　之所以以这个标题开头，正是因为这篇文章主要讲的便是基于　Github Pages 服务与 Hexo 静态博客框架搭建博客的教程。博客是什么？在现在这个信息爆炸的时代，我们每天接收到的信息多不胜数。在这海量的信息里有大部分是无用的，我认为在吸收这些信息的同时，能够表达出自身想法、整合并输出优秀的内容正是我们所欠缺的。所以便在这里献上这篇文章，拥有一个博客也是你表达自身想法的第一步。权当抛砖引玉了 ^_^</p>
<a id="more"></a>
<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><blockquote>
<ol>
<li>Github 账户</li>
<li>Git 客户端</li>
<li>NodeJS</li>
<li>文本编辑器</li>
</ol>
</blockquote>
<h1 id="使用-Github-Pages-服务"><a href="#使用-Github-Pages-服务" class="headerlink" title="使用 Github Pages 服务"></a>使用 Github Pages 服务</h1><ol>
<li><p>创建一个以自己 Github 用户名加上 github.io 的仓库</p>
<blockquote>
<p>例：jjandxa 是我的 Github 用户名，所以需要创建一个名为 jjandxa.github.io 的仓库</p>
</blockquote>
</li>
<li><p>测试 Github Pages 服务是否正常</p>
<p>往该仓库推送一个 index.html 页面，并访问 用户名.github.io 域名</p>
<blockquote>
<p>这里我以一个测试账户来测试</p>
</blockquote>
<p><img src="/images/hexo-github-pages/1.png" alt="1"></p>
<p><img src="/images/hexo-github-pages/2.png" alt="2"></p>
</li>
</ol>
<h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><ol>
<li><p>安装 NodeJS ，这一步比较简单，这里就不再赘述了。</p>
<blockquote>
<p>这里有一个需要注意的点， Windows 下安装 NodeJS 时需要勾选 Add Path 。如果忘记勾选了，就需要自己配置环境变量。</p>
</blockquote>
</li>
<li><p>NPM 是 NodeJS 的包管理器，但是 NPM 官方仓库的速度很慢。建议安装淘宝的 CNPM ，在命令行输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cnpm -g</div></pre></td></tr></table></figure>
</li>
<li><p>使用 CNPM 安装 Hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install hexo -g</div></pre></td></tr></table></figure>
</li>
<li><p>使用 hexo 创建一个博客</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div></pre></td></tr></table></figure>
<blockquote>
<p>创建博客时可能需要等很久，这是因为在安装 hexo 需要的依赖。当看到提示 <strong>Install Dependencies</strong> 时就可以 <strong>Ctrl + C</strong> 取消安装了</p>
</blockquote>
</li>
<li><p>安装依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">cnpm install</div></pre></td></tr></table></figure>
</li>
<li><p>启动服务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo s</div></pre></td></tr></table></figure>
</li>
<li><p>访问 Hexo ，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<p><img src="/images/hexo-github-pages/3.png" alt="3"></p>
</li>
</ol>
<h1 id="部署博客到-Github-Pages"><a href="#部署博客到-Github-Pages" class="headerlink" title="部署博客到 Github Pages"></a>部署博客到 Github Pages</h1><ol>
<li><p>安装 hexo git 部署依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
</li>
<li><p>修改博客配置文件 <strong>_config.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: &lt;repository url&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>该配置默认会部署到 master 分支</p>
</blockquote>
</li>
<li><p>执行部署命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d</div></pre></td></tr></table></figure>
</li>
<li><p>完成后即可直接以你的仓库名称为域名来访问你的博客啦！</p>
</li>
</ol>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>关于如何配置博客的页面标题、作者、描述、菜单等等请浏览 Hexo 的<a href="https://hexo.io/zh-cn/" target="_blank" rel="external">官方网站</a>。</p>
<p>关于如何配置主题请在 Hexo 官网的主题列表挑选一款主题，然后在查看该主题的文档来配置。这里以 Next 主题为例，请访问 Next 的<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">官方网站</a>查看文档。</p>
]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SSM 整合教程，献给新人们的礼物 - 第一章]]></title>
      <url>/2017/03/24/ssm-c1/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　大半年没有更新过博客，最近在水神的鼓动下又弄起了 Hexo ，想想还是写篇博客抒发下。</p>
<p>　　初入 Java Web 的童鞋第一个门槛就是创建一个 Web 应用程序，尽管可以使用 Servlet 编写，但那也显得太过<strong>“原始“</strong>了。为了优化应用架构、提高效率、代码可控，所以我们需要用到各种框架来辅助我们构建应用程序。目前我主要使用的便是 Spring MVC、Spring、Mybatis—简称 <strong>SSM</strong> 。</p>
<blockquote>
<p>接下来会使用 Maven 来管理依赖与构建项目，不懂的童鞋也可以等我后面专门讲解 Maven 的文章。</p>
<p>项目使用 JetBrains 家族的 Intellij Idea 开发。</p>
</blockquote>
<a id="more"></a>
<h1 id="创建-Maven-Web-项目"><a href="#创建-Maven-Web-项目" class="headerlink" title="创建 Maven Web 项目"></a>创建 Maven Web 项目</h1><p>　　首先我们需要创建一个基于 Maven 的 Web 项目，点击 <strong>Create New Project </strong>。</p>
<p><img src="/images/ssm/create-project-1.png" alt="create-project-1"></p>
<p>　　选择 <strong>Maven</strong> ，并且选择生成 Web 原型项目-勾选 <strong>Create from archetype</strong> ，选择 <strong>maven -archetype-webapp</strong> 原型，并填写项目信息。</p>
<blockquote>
<p>提示，选择 archetype 时可能觉得有点乱，这时输入 webapp 即可过滤选择项，然后通过上下箭头选择</p>
<p>Maven 相关：</p>
<p>GroupId: 一般为你自己的独立域名</p>
<p>ArtifactId: 项目名称</p>
<p>Version: 版本号</p>
<p>以上信息是 Maven 项目里的必要条件，描述了该项目的所有者、名称、版本号，以作为其他项目添加依赖时的依据。</p>
</blockquote>
<p><img src="/images/ssm/create-project-2.png" alt="create-project-2"></p>
<p><img src="/images/ssm/create-project-3.png" alt="create-project-3"></p>
<p><img src="/images/ssm/create-project-4.png" alt="create-project-4"></p>
<p>　　点击 <strong>Finsh</strong> 完成项目的创建。</p>
<p><img src="/images/ssm/create-project-5.png" alt="create-project-5"></p>
<p><img src="/images/ssm/create-project-6.png" alt="create-project-6"></p>
<blockquote>
<p>最好开启 Maven 的自动导入喔</p>
</blockquote>
<h1 id="Maven-pom-xml-设置"><a href="#Maven-pom-xml-设置" class="headerlink" title="Maven pom.xml 设置"></a>Maven pom.xml 设置</h1><p>　　指定源代码、单元测试相关的路径。</p>
<p><img src="/images/ssm/pom-settings-1.png" alt="pom-settings-1"></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 打包后的文件名 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>hello-ssm<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 项目目录 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 源代码目录 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 源代码资源目录 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 单元测试代码目录 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></div></pre></td></tr></table></figure>
<p>部署项目。</p>
<p><img src="/images/ssm/deploy-project-1.png" alt="deploy-project-1"></p>
<p>项目正常启动。</p>
<p><img src="/images/ssm/helloword-web.png" alt="helloword-web"></p>
<h1 id="Spring-amp-Spring-MVC整合"><a href="#Spring-amp-Spring-MVC整合" class="headerlink" title="Spring &amp; Spring MVC整合"></a>Spring &amp; Spring MVC整合</h1><p>　　首先需要添加依赖，<strong>spring-webmvc</strong> 已经包含了 <strong>spring-context</strong> 、 <strong>spring-core</strong> 等等其他核心依赖，所以不用再显式添加了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- servlet-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- spring context --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jackson --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- fileupload --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加完依赖，需要对 <strong>web.xml</strong> 进行配置，整合 <strong>spring &amp; spring mvc</strong> 时需要注意以下几点:</p>
<ol>
<li><p>Spring Context 配置</p>
<p>在 <strong>web.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring 监听与参数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ssm-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>该配置指定了 <strong>ContextLoaderListener</strong> 监听器，该监听器会在容器启动时读取 <strong>contextConfigLocation </strong> 参数以加载 Spring 配置文件。</p>
<p>注：若需要加载多个配置文件，在 <strong>contextConfigLocation</strong> 参数里以 <strong>,</strong> 分隔配置文件即可。</p>
<p>例：classpath:ssm-context.xml, classpath:ssm-context2.xml</p>
</blockquote>
</li>
<li><p>编码过滤器</p>
<p>在 <strong>web.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字符编码过滤器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 映射所有请求到该过滤器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注：该过滤器的作用等同于</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">request.setCharacterEncoding(“编码”);</div><div class="line">response.setCharacterEncoding(“编码”);</div></pre></td></tr></table></figure>
<blockquote>
<p>该过滤器接收两个参数: <strong>encoding</strong> 、 <strong>forceEncoding</strong> 。<strong>encoding</strong> 为设置 request 的编码，<strong>forceEncoding</strong> 为设置 response 的编码与 request 的编码一致。</p>
</blockquote>
</li>
<li><p>Spring MVC 配置</p>
<p>在 <strong>web.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring MVC --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:ssm-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>该配置指定了 Spring MVC 的 Controller 分发器，并且设置了读取 MVC 配置的 xml 配置文件，然后将该 Servlet 映射为 / 路径。</p>
<p>注：经常有人会把 <strong>/</strong> 与 <strong>/*</strong> 弄混</p>
<p>/：代表匹配 / 路径下的所有 url ，不包括有后缀的路径，如：/user/addUser 或 /user/deleteUser。</p>
<p>/*：代表匹配所有路径，包括有后缀名的，如：/user/addUser 和 /user/userManaged.jsp。</p>
<p>如配置为 /* 的话需要单独设置 MVC 的资源目录，以忽略 DispatcherServlet 的拦截，如果不配置的话会导致访问 JSP 报 404 错误。</p>
</blockquote>
<p>在 <strong>resource</strong> 目录下创建 ssm-context.xml 、 ssm-mvc.xml 文件。</p>
<blockquote>
<p>注：Idea 支持直接创建 Spring 配置文件，右键 <strong>resource</strong> 目录，<strong>New - XML Configuration - Spring Config</strong> 即可。</p>
</blockquote>
<p>在 <strong>ssm-mvc.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 扫描 Spring 组件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:component-scan</span> <span class="attr">base-package</span>=<span class="string">"ml.jjandxa"</span> &gt;</span><span class="tag">&lt;/<span class="name">mvc:component-scan</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.UrlBasedViewResolver"</span> &gt;</span></div><div class="line">  <span class="comment">&lt;!-- JSTL 解析器 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 视图前缀 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/page"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 视图后缀 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>ssm-context.xml</strong> 添加以下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 开启注解 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-config</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上配置设置了 Spring 扫描 ml.jjandxa 包下的所有组件，并且开始注解配置。最后设置了 Srping MVC 的视图解析器。</p>
</blockquote>
<p>继续在 <strong>ssm-mvc.xml</strong> 添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 对@ResponBody注解进行支持 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span> &gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 支持上传文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>以上配置为开启 @ResponseBody 注解的 Json 输出，并且开启了上传文件的支持。</p>
</blockquote>
</li>
</ol>
<h1 id="你好，Spring-MVC"><a href="#你好，Spring-MVC" class="headerlink" title="你好，Spring MVC"></a>你好，Spring MVC</h1><p><img src="/images/ssm/helloword-web.png" alt="helloword-web"></p>
<p>　　以上就是整合 Spring MVC 的详尽步骤，启动项目检查是否能够正常启动！如果正常启动，代表上述配置并没有出什么错误，编写一个 Controller 验证 Spring MVC 是否正常工作。编写如下控制器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> ml.jjandxa.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by aixiaoai on 2017/3/24.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSpring</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        result.put(<span class="string">"data"</span>, <span class="string">"Hello World!"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试请求：</p>
<p><img src="/images/ssm/test-controller.png" alt="test-controller"></p>
<p>成功啦！^_^</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://github.com/jjandxa/hello-ssm/tree/Chapter-1" target="_blank" rel="external">源代码</a></p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring MVC </tag>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
            <tag> 后端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[部署Docker Gitlab]]></title>
      <url>/2016/07/14/deploy-docker-gitlab/</url>
      <content type="html"><![CDATA[<h1 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h1><p>　　由于公司现在 <strong>Git</strong> 私有服务使用的是 <strong>Gitblit</strong> ，虽然只有我们一个项目组在用 <strong>Git</strong> ，但使用下来问题不断，基本有以下几点：</p>
<ol>
<li>团队成员对 <strong>Git</strong> 的使用不熟悉，目前只有我一个人长期使用 <strong>GitHub</strong> 、 <strong>Coding</strong> 等服务。</li>
<li>缺少 <strong>Git</strong> 工作流程的规范化。</li>
<li>由第二点引起的缺少代码评审机制</li>
</ol>
<blockquote>
<p>对于第一点，引入 <strong>SourceTree</strong> 可以解决大部分问题，在操作上使用图形界面相对于 <strong>Bash</strong> 上敲命令容易的多。</p>
<p>对于第二点，起先打算引入 <strong>Git Flow</strong> 工作流，然而相对来说还是较为复杂，成员不一定能够理解其中奥妙。</p>
<p>对于第三点，如果使用 <strong>Git Flow</strong> 工作流的话实现不了强制性代码评审，直到后来看到了 <strong>Gitlab</strong> 。</p>
</blockquote>
<a id="more"></a>
<p>　　基于以上几点，我在 Ubuntu 16.04 安装了 <strong>Gitlab</strong> ，具体安装过程我就不详述了，有兴趣的请点以下链接前往官网： <a href="https://gitlab.com/" target="_blank" rel="external">点我去官网</a> 使用过程中遇到了一个问题，在进入管理员页面时经常会出现 <strong>502</strong> 错误。详细排查之后才发现是内存不足的原因。</p>
<p><a href="https://jjandxa.github.io/images/20160714gitlab502.png" target="_blank" rel="external"><img src="/images/20160714gitlab502.png" alt="gitlab502"></a></p>
<p>试用过后认为有些优点是比较值得说的：</p>
<ol>
<li>界面美观<br><a href="https://jjandxa.github.io/images/20160714gitlabindex.png" target="_blank" rel="external"><img src="/images/20160714gitlabindex.png" alt="gitlabindex"></a></li>
<li><strong>Gitlab Flow</strong><br>类似于 <strong>Github Flow</strong> 的工作流，就问你怕没？<br><strong>master</strong> 分支作为保护分支，只有项目拥有者可以直接操作，成员只能在 <strong>master</strong> 基础上创建功能分支，开发完成后，提交 <strong>Merge Request</strong> ，项目拥有者同意后才能合并代码。</li>
<li>强制性代码评审<br>由上一条带来的好处就是， <strong>Mereg Request</strong> 时，项目拥有者可以和其他成员一起评审代码，对代码进行评论，在此期间，成员可以继续提交代码， <strong>Merge Request</strong> 会自动跟踪最新代码的情况。</li>
<li><strong>Gitlab CI</strong> 集成<br>暂时没用到，就不深入讨论了</li>
</ol>
<p>具体而言， <strong>Gitlab</strong> 足够强大，然而问题来了，公司现在代码服务器在内网，系统为 <strong>Windows Server 2008</strong> ，而 <strong>Gitlab</strong> 只支持 Linux ，无奈只能等新服务器再使用 <strong>Gitlab</strong> 。</p>
<blockquote>
<p>你以为这样就结束了？</p>
</blockquote>
<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>并没有，我在 Ubuntu 16.04 上安装了 <strong>Gitlab</strong> 后，想起对服务器来说，系统上装了很多服务，维护时总是在解决各种服务的冲突，另外服务不支持快速部署，对移植不友好等等。<br>由此我想到了 <strong>Docker</strong> ，在恶补了一两天，熟悉 <strong>Docker</strong> 基本使用后，便着手在 <strong>Docker</strong> 上部署 <strong>Gitlab</strong> ，由于在 <strong>Docker</strong> 上已经有成熟的 <strong>Gitlab</strong> 镜像，我们直接拿来用就可以了。<a href="https://www.damagehead.com/docker-gitlab/" target="_blank" rel="external">Docker-Gitlab</a> 在官网可以看到，部署方式特别简单，以下指出几点关键的地方：</p>
<p><strong>docker-compose</strong><br>作为一个将容器部署从复杂变为简单的工具，我一开始是不知道的，从 <strong>Docker</strong> 官网我们可以看到以下这两条安装命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -L https://github.com/docker/compose/releases/download/1.6.2/run.sh &gt; /usr/local/bin/docker-compose</div><div class="line">$ chmod +x /usr/local/bin/docker-compose</div></pre></td></tr></table></figure>
<p>比较坑的是，国内运行这条命令来安装的速度，慢如乌龟。我一天都没下好，所以建议大家使用 python pip 来安装，运行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//安装 pip</div><div class="line">sudo apt-get install python-pip</div><div class="line"></div><div class="line">//安装 docker-compose</div><div class="line">pip install docker-compose</div></pre></td></tr></table></figure>
<p>安装了 <strong>docker-compose</strong> 后，就需要部署 <strong>Docker-Gitlab</strong> 了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//下载脚本</div><div class="line">wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml</div><div class="line">//第一次运行，来编译，创建容器</div><div class="line">docker-compose  up</div><div class="line"></div><div class="line">//后面可以运行一下命令启动或停止容器</div><div class="line">docker-compose start</div><div class="line"></div><div class="line">docker-compose stop</div></pre></td></tr></table></figure>
<p>最后，说一下如何备份 <strong>Docker-Gitlab</strong> 的数据，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">sudo docker run --name gitlab -it --rm \</div><div class="line">--link [你的postgresql容器名称]:postgresql --link \ [你的redis容器名称]:redisio \</div><div class="line">--net [docker-compose 初次运行时创建的网络名]  \</div><div class="line">-e &apos;DB_ADAPTER=postgresql&apos; \</div><div class="line">-e &apos;DB_HOST=postgresql&apos; \</div><div class="line">-e &apos;DB_PORT=5432&apos; \</div><div class="line">-e &apos;DB_USER=gitlab&apos; \</div><div class="line">-e &apos;DB_PASS=password&apos; \</div><div class="line">-e &apos;DB_NAME=gitlabhq_production&apos; \</div><div class="line">-e &apos;REDIS_HOST=redis&apos; \</div><div class="line">-e &apos;REDIS_PORT=6379&apos; \</div><div class="line">--publish 10022:22 --publish 10080:80 \</div><div class="line">--env &apos;GITLAB_PORT=10080&apos; --env &apos;GITLAB_SSH_PORT=10022&apos; \</div><div class="line">--env &apos;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">--volume /srv/docker/gitlab/gitlab:/home/git/data \</div><div class="line">sameersbn/gitlab:8.9.6 app:rake gitlab:backup:create</div></pre></td></tr></table></figure>
<p>正常情况下你会看下以下画面：<br><a href="https://jjandxa.github.io/images/20160714dockergitlabbackup.png" target="_blank" rel="external"><img src="/images/20160714dockergitlabbackup.png" alt="docker-gitlab backup"></a></p>
<p>备份文件放在 <strong>/srv/docker/gitlab/gitlab/backups</strong> 目录下，更换服务器时，只需要将备份文件放到新服务器恢复，一切就完成啦</p>
<h1 id="End"><a href="#End" class="headerlink" title="End"></a>End</h1>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gitlab </tag>
            
            <tag> Docker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RequireJS 填坑]]></title>
      <url>/2016/05/09/RequireJS/</url>
      <content type="html"><![CDATA[<p><strong>什么是 RequireJS</strong> — 自己 Google 去。</p>
<h2 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h2><p><a href="http://requirejs.org/" target="_blank" rel="external">点我去官网</a></p>
<p>刚认识用 RequireJS 之前，我还不知道前端还能这样模块化编程，尽管我是个渣，但当我第一次用上之后就回不去以前了，模块化管理你的 JS 是很有必要的，有利于前端工程的规范化管理，页面也不用写很多 link 标签和 script 标签了。</p>
<h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>由于 RequireJS 是基于 AMD 规范的，我们需要来了解它是怎么使用的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//hello.js</div><div class="line">define([&apos;jquery&apos;],function($) &#123;</div><div class="line">    //$(&apos;body&apos;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这是一个基于的 AMD 规范定义的模块，它接收两个参数，第一个为依赖的字符串数组，第二个为回调的函数。这个例子表明它依赖于 jquery ，RequireJS 在调用加载这个模块时会提前将 jquery 加载进来，并作为参数传进回调函数。</p>
<p>然而我们要怎么使用这个模块呢？</p>
<p><code>var hello = require([&#39;hello&#39;])</code></p>
<p>这样就可以将一个 define 模块加载进来，并且使用它。然并卵，我们还是结合实例讲解更容易让人理解。</p>
<h2 id="Hello-RequireJS"><a href="#Hello-RequireJS" class="headerlink" title="Hello RequireJS"></a>Hello RequireJS</h2><p>以往我们调用 JS 无非是使用外联标签 script 将 JS 文件引入，这样无可避免的会出现如下丑陋的场景</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"a.js"</span> &gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"b.js"</span> &gt;&lt;/script&gt;</div><div class="line">&lt;script src=<span class="string">"c.js"</span> &gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>可以想象，当你需要引入的 JS 文件越来越多时会是一副什么景象。正确的做法是</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset="UTF-8"&gt;</div><div class="line">  &lt;title&gt;Hello RequireJS&lt;/title&gt;</div><div class="line">  &lt;script src="require.js" &gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  var a = require('a')</div><div class="line">  var b = require('b')</div><div class="line">  var c = require('c')</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>怎么样？是否简洁了很多呢？然而还不够，我们希望 JS 代码尽量抽离出 HTML ，所以我们可以这样写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// main.js</div><div class="line">define([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;], function(a, b, c) &#123;</div><div class="line"></div><div class="line">&#125;)</div><div class="line">// index.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">	&lt;title&gt;Hello RequireJS&lt;/title&gt;</div><div class="line">	&lt;script data-main=&quot;main&quot; src=&quot;require.js&quot; &gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>实在太简洁了，优美的代码总是让人愉悦，不是么？</p>
<h2 id="开始使用啦"><a href="#开始使用啦" class="headerlink" title="开始使用啦"></a>开始使用啦</h2><p>由于我们的实际项目没有这么简单，所以我们需要对 RequireJS 进行一些基础配置先看一下项目目录<br><a href="https://jjandxa.github.io/images/20160627REQUIREJS1.png" target="_blank" rel="external"><img src="/images/20160627REQUIREJS1.png" alt="project"></a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// main.js</div><div class="line">require.config(&#123;</div><div class="line">  // 所有的路径会以 baseUrl 为基础    </div><div class="line">  baseUrl: &apos;static/lib&apos;,    </div><div class="line">  // 定义模块    </div><div class="line">  paths: &#123;        </div><div class="line">    app: &apos;../js&apos;.        </div><div class="line">    jquery: &apos;jquery-3.0.0&apos;    </div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">// js/hello.js</div><div class="line">define([&apos;jquery&apos;], function ($) &#123;    </div><div class="line">	$(&apos;body&apos;).append(&apos;&lt;p&gt;Hello RequireJS!&lt;/p&gt;&apos;)</div><div class="line">&#125;)</div><div class="line">// index.html</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div><div class="line">  &lt;meta content=&quot;width=device-width, initial-scale=1&quot; name=&quot;viewport&quot;/&gt;</div><div class="line">  &lt;title&gt;Hello RequireJS&lt;/title&gt;</div><div class="line">  &lt;script src=&quot;static/require.js&quot; &gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;script&gt;</div><div class="line">require([&apos;static/main&apos;], function () &#123;</div><div class="line">	require([&apos;app/hello&apos;])</div><div class="line">&#125;)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>完成啦，只需要在 HTML 页面引入 require.js ，并且依赖 main.js 全局配置文件，然后就可以尽情依赖自己的模块了！！<br>打开 index.html<br><a href="https://jjandxa.github.io/images/20160627REQUIREJS2.png" target="_blank" rel="external"><img src="/images/20160627REQUIREJS2.png" alt="index"></a></p>
<h2 id="非AMD模块的兼容"><a href="#非AMD模块的兼容" class="headerlink" title="非AMD模块的兼容"></a>非AMD模块的兼容</h2><p>我们知道 jquery 有很多优秀的插件，它们都依赖于 jquery ，但是很遗憾的是有很多插件并不支持 AMD 规范，这导致我们依赖这些插件时会遇到一些错误，我们该怎么处理呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">require.config(&#123;    </div><div class="line">  //省略    ...    </div><div class="line">  shim: &#123;        </div><div class="line">    &apos;jquery-plugin&apos;: &#123;</div><div class="line">      deps: [&apos;jquery&apos;]</div><div class="line">    &#125;    </div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>RequireJS 提供了 shim 选项为非 AMD 模块进行兼容，我们为 jquery-plugin 插件手动配置了其依赖于 jquery ，这样 RequireJS 会确保 jquery 在 jquery-plugin 之前加载！<br><strong>是不是很完美呢？</strong>附上源码:<br><a href="https://github.com/jjandxa/requirejs-demo" target="_blank" rel="external">requirejs-demo</a></p>
]]></content>
      
        <categories>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> RequireJS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacBook Pro]]></title>
      <url>/2016/04/22/MacBook-Pro/</url>
      <content type="html"><![CDATA[<p><strong>话说从学生时代就盼着的 MacBook Pro 终于入手了</strong></p>
<p>　　之前在长沙时，本想等着3月份 Apple 春季发布会新款出来买新款的，结果那天晚上看完发布会整个人失望的无以复加。竟然只发布了 iPhone SE , iPad Pro , 还有几个表带，我能说啥？Omg ，我的 RMBP 只能继续等了。</p>
<p><strong>四月</strong></p>
<p>　　我忍不了，回到家后百无聊赖的，想起了盼望已久的 MacBook Pro ,我的心蠢蠢欲动，终于！在控制不了双手的情况下，点下了下单按钮！！一切都归于平静了。这时，我想起了那句话：</p>
<blockquote>
<p>买了悔三天 不买悔三年</p>
</blockquote>
<p>至于说为什么我这么迷恋 MBP<br>作为一个正常人，我只能说：</p>
<blockquote>
<p>因为它美</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> OS X </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OS X </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello Hexo]]></title>
      <url>/2016/04/21/Hello-Hexo/</url>
      <content type="html"><![CDATA[<p>能说啥！这么久了，终于往 Github 挂了 Blog，归根结底就是懒吧~~~大家好，我来了！</p>
]]></content>
      
        <categories>
            
            <category> 其他 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
